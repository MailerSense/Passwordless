// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { PasswordlessApiActionControllerNewData, PasswordlessApiActionControllerNewResponses, PasswordlessApiActionControllerNewErrors, PasswordlessApiActionControllerShowData, PasswordlessApiActionControllerShowResponses, PasswordlessApiActionControllerShowErrors, PasswordlessApiActionControllerUpdate2Data, PasswordlessApiActionControllerUpdate2Responses, PasswordlessApiActionControllerUpdate2Errors, PasswordlessApiActionControllerUpdateData, PasswordlessApiActionControllerUpdateResponses, PasswordlessApiActionControllerUpdateErrors, PasswordlessApiAppControllerIndexData, PasswordlessApiAppControllerIndexResponses, PasswordlessApiAppControllerIndexErrors, GetApiServerV1UsersByIdData } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Authenticate an action
 * Authenticate an action
 */
export const passwordlessApiActionControllerNew = <ThrowOnError extends boolean = false>(options?: Options<PasswordlessApiActionControllerNewData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<PasswordlessApiActionControllerNewResponses, PasswordlessApiActionControllerNewErrors, ThrowOnError>({
        url: '/api/server/v1/actions/new',
        ...options
    });
};

/**
 * Show an action
 * Show an action
 */
export const passwordlessApiActionControllerShow = <ThrowOnError extends boolean = false>(options: Options<PasswordlessApiActionControllerShowData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PasswordlessApiActionControllerShowResponses, PasswordlessApiActionControllerShowErrors, ThrowOnError>({
        url: '/api/server/v1/actions/{id}',
        ...options
    });
};

/**
 * Update an action
 * Update an action
 */
export const passwordlessApiActionControllerUpdate2 = <ThrowOnError extends boolean = false>(options: Options<PasswordlessApiActionControllerUpdate2Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PasswordlessApiActionControllerUpdate2Responses, PasswordlessApiActionControllerUpdate2Errors, ThrowOnError>({
        url: '/api/server/v1/actions/{id}',
        ...options
    });
};

/**
 * Update an action
 * Update an action
 */
export const passwordlessApiActionControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<PasswordlessApiActionControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PasswordlessApiActionControllerUpdateResponses, PasswordlessApiActionControllerUpdateErrors, ThrowOnError>({
        url: '/api/server/v1/actions/{id}',
        ...options
    });
};

/**
 * Show App
 * Show the properties of the current App
 */
export const passwordlessApiAppControllerIndex = <ThrowOnError extends boolean = false>(options?: Options<PasswordlessApiAppControllerIndexData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<PasswordlessApiAppControllerIndexResponses, PasswordlessApiAppControllerIndexErrors, ThrowOnError>({
        url: '/api/server/v1/app',
        ...options
    });
};

export const getApiServerV1UsersById = <ThrowOnError extends boolean = false>(options?: Options<GetApiServerV1UsersByIdData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/api/server/v1/users/{id}',
        ...options
    });
};