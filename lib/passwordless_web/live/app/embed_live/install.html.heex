<div class="flex flex-col p-6 gap-6">
  <.box card>
    <.form_header title={gettext("Installation")} no_margin />
    <.p>
      Before you can use Passwordless, you need to install the SDK in your application. The SDK is currently available for Node.js. We're actively working on the Web Components SDK that will allow you to use Passwordless in any frontend framework.
    </.p>
    <.live_component
      id="installation-intro"
      module={PasswordlessWeb.Components.MultiCodeBlock}
      codes={[
        %{
          tab: gettext("Bash"),
          language: :bash,
          code: ~s"""
          ## Get Current App
          curl "#{PasswordlessWeb.Router.Helpers.app_url(PasswordlessWeb.Endpoint, :show)}" \\
              -H 'Authorization: Bearer #{if @reveal_secret?, do: @secret, else: "sk_live_*******"}'
          """
        },
        %{
          tab: gettext("Typescript"),
          language: :typescript,
          code: ~s"""
          // First, install the SDK
          // pnpm add @passwordless/tools

          import { Passwordless, Residency } from '@passwordless/tools';

          const secret = process.env.PASSWORDLESS_APP_SECRET;
          if (!secret) {
            throw new Error("PASSWORDLESS_APP_SECRET is undefined");
          }

          const residency = Residency.EU;

          Passwordless.init({ secret, residency });
          """
        }
      ]}
    />

    <.p>
      From now on you can use the client anywhere in your application to create authentication challenges and perform passwordless flows.
    </.p>
  </.box>
  <.simple_table items={@keys} count={Enum.count(@keys)} title={gettext("API keys")}>
    <:if_empty>{gettext("No %{models} defined yet", models: gettext("keys"))}</:if_empty>
    <:col field={:name} />
    <:col :let={key} field={:token}>
      <span :if={key.id == "app_secret"} class="flex items-center gap-2">
        {if @reveal_secret?, do: @secret, else: key.token}
        <.button
          size="xs"
          color="light"
          title={if @reveal_secret?, do: gettext("Hide secret"), else: gettext("Reveal secret")}
          phx-click="toggle_reveal_secret"
          phx-target={@myself}
        />
      </span>

      {if key.id == "app_id", do: key.token}
    </:col>
    <:col :let={key} field={:usage}>
      <%= if key.id == "app_id" do %>
        <.badge with_dot size="sm" color="success" label={gettext("Public")} />
      <% else %>
        <.badge with_dot size="sm" color="danger" label={gettext("Secret")} />
      <% end %>
    </:col>
    <:col :let={key} field={:inserted_at} label="Created">
      {format_date_time(key.inserted_at)}
    </:col>
    <:col actions></:col>
    <:actions :let={key}>
      <.copy_button
        size="sm"
        color="light"
        title={gettext("Copy")}
        value={if key.id == "app_secret", do: @secret, else: key.token}
      />
    </:actions>
  </.simple_table>
  <.box card>
    <.form_header title={gettext("IP Allowlist")} no_margin />
    <.p>
      Backend API access can be allowed from only whitelisted IP ranges. If you have static outbound IP addresses, you can add them here.
    </.p>
    <.form
      id="app-security-form"
      for={@form}
      phx-submit="save"
      phx-change="validate"
      phx-target={@myself}
    >
      <.inputs_for :let={settings} field={@form[:settings]}>
        <.field
          type="checkbox"
          field={settings[:allowlist_api_access]}
          label={gettext("Allowlist API access")}
        />
        <div :if={@allowlist_api_access} class="pc-form-field-wrapper">
          <.field_label required>{gettext("Allowed IP ranges")}</.field_label>
          <div class="flex flex-col gap-y-2">
            <.inputs_for :let={f} field={settings[:allowlisted_ip_addresses]}>
              <input
                type="hidden"
                name="app[settings][allowlisted_ip_addresses_sort][]"
                value={f.index}
              />
              <div class="flex items-center grow gap-2">
                <.field
                  type="text"
                  minlength="7"
                  maxlength="15"
                  pattern="^(?>(\d|[1-9]\d{2}|1\d\d|2[0-4]\d|25[0-5])\.){3}(?1)$"
                  label=""
                  field={f[:address]}
                  required
                  class="font-mono"
                  wrapper_class="mb-0! w-full grow"
                >
                  <:action>
                    <.icon_form_button
                      size="sm"
                      name="app[settings][allowlisted_ip_addresses_drop][]"
                      type="button"
                      icon="custom-trash"
                      color="light"
                      title={gettext("Remove")}
                      value={f.index}
                      event={JS.dispatch("change")}
                      disabled={f.index == 0}
                    />
                  </:action>
                </.field>
              </div>
            </.inputs_for>
          </div>
          <div class="flex mt-1.5">
            <.button
              size="xs"
              type="button"
              color="light"
              icon="remix-add-circle-line"
              label={gettext("Add IP range")}
              name="app[settings][allowlisted_ip_addresses_sort][]"
              value="new"
              phx-click={JS.dispatch("change")}
            />
          </div>
          <input type="hidden" name="app[settings][allowlisted_ip_addresses_drop][]" />
        </div>
      </.inputs_for>
    </.form>
    <div
      :if={@allowlist_api_access and Util.present?(@allowlisted_ip_addresses)}
      class="flex flex-col"
    >
      <.p class="font-mono text-success-600 dark:text-success-300">
        {gettext("Allowed IP ranges:")}
      </.p>
      <.ul>
        <li
          :for={{first, last, hosts} <- @allowlisted_ip_addresses}
          class="font-mono text-success-600 dark:text-success-300"
        >
          {ngettext(
            "%{first} - %{last} (%{count} host)",
            "%{first} - %{last} (%{count} hosts)",
            hosts,
            first: first,
            last: last,
            count: hosts
          )}
        </li>
      </.ul>
    </div>
  </.box>
  <.box card>
    <.form_header title={gettext("Usage")} no_margin />
    <.p>
      You can use the Backend API to authenticate your users directly from your own backend. It is perfect for authenticators such a Email, SMS or WhatsApp OTP that do not require UI components.
    </.p>
    <.a
      to={~p"/embed/api"}
      label={gettext("Read API documentation")}
      style="link"
      link_type="live_redirect"
    />
  </.box>
</div>
