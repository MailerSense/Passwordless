<div class="flex flex-col gap-6 py-6 px-8">
  <.box card>
    <.form_header title={gettext("Backend API")} no_margin />
    <.p>
      You start by creating a new action - user login, settings page access, order placement. Passwordless will then decide whether to challenge the user via specified authenticators - Email, OTP, Magic Link etc.
    </.p>
    <.live_component
      id="intro-code-block"
      module={PasswordlessWeb.Components.MultiCodeBlock}
      codes={[
        %{
          tab: gettext("Basic Entities"),
          language: :asciidoc,
          code: ~s"""
          WebView metrics set up happens like so:

            Startup()
              │
              ├────────────┐
              │            ▼
              │         query GMS for consent
              ▼            │
            Initialize()   │
              │            ▼
              │         SetHaveMetricsConsent()
              │            │
              │ ┌──────────┘
              ▼ ▼
            MaybeStartMetrics()
              │
              ▼
            MetricsService::Start()

          All the named functions in this diagram happen on the UI thread. Querying GMS
          happens in the background, and the result is posted back to the UI thread, to
          SetHaveMetricsConsent(). Querying GMS is slow, so SetHaveMetricsConsent()
          typically happens after Initialize(), but it may happen before.
          """
        },
        %{
          tab: gettext("Webhooks"),
          language: :asciidoc,
          code: ""
        },
        %{
          tab: gettext("Rules"),
          language: :asciidoc,
          code: ""
        }
      ]}
    />
  </.box>

  <.box card>
    <.form_header title={gettext("Email OTP")} no_margin />
    <.p>
      You start by creating a new action - user login, settings page access, order placement. Passwordless will then decide whether to challenge the user via specified authenticators - Email, OTP, Magic Link etc.
    </.p>
    <.live_component
      id="multi-code-block"
      module={PasswordlessWeb.Components.MultiCodeBlock}
      codes={[
        %{
          tab: gettext("Typescript"),
          language: :typescript,
          code: ~s"""
          import { Passwordless } from "@passwordless/tools";

          const action = Passwordless.authenticate({
            action: "login",
            user:  {
              username: "1234567890",
              emails: [
                { address: "user@example.com" },
              ],
            },
            rules: [
              {
                if: true, then: [ { challenge: Passwordless.EMAIL_OTP } ],
              },
            ],
          });
          """
        },
        %{
          tab: gettext("Typescript2"),
          language: :typescript,
          code: ~s"""
          import { Passwordless } from "@passwordless/tools";

          const action2 = Passwordless.authenticate({
            action: "login",
            user:  {
              username: "1234567890",
              emails: [
                { address: "user@example.com" },
              ],
            },
            rules: [
              {
                if: true, then: [ { challenge: Passwordless.EMAIL_OTP } ],
              },
            ],
          });
          """
        }
      ]}
    />
    <.p>
      The code above create an Email OTP challenge and delivers the code to the user. Then, the user provides the code back to the application:
    </.p>
    <.code_block
      language={:typescript}
      code={
        ~s"""
        import { Passwordless } from "@passwordless/tools";

        const action = Passwordless.continue({
          action: {id: action.id},
          data: {
            otp_code: "123456",
          },
        });

        if (action.state === Passwordless.ALLOW) {
          console.log("User is allowed to continue");
        }
        """
      }
    />
  </.box>
  <.box card>
    <.form_header title={gettext("Magic link")} no_margin />
    <.p>
      You start by creating a new action - user login, settings page access, order placement. Passwordless will then decide whether to challenge the user via specified authenticators - Email, OTP, Magic Link etc.
    </.p>
  </.box>
  <.box card>
    <.form_header title={gettext("Time-based OTP")} no_margin />
    <.p>
      You start by creating a new action - user login, settings page access, order placement. Passwordless will then decide whether to challenge the user via specified authenticators - Email, OTP, Magic Link etc.
    </.p>
  </.box>
</div>
