<div class="flex flex-col gap-6">
  <.box card>
    <.form_header title={gettext("Installation")} no_margin />
    <.p>
      Before you can use Passwordless, you need to install the SDK in your application. The SDK is currently available for Node.js. We're actively working on the Web Components SDK that will allow you to use Passwordless in any frontend framework.
    </.p>
    <.live_component
      id="installation-intro"
      module={PasswordlessWeb.Components.MultiCodeBlock}
      codes={[
        %{
          tab: gettext("npm"),
          language: :bash,
          code: ~s"""
          npm install @passwordless/node
          """
        },
        %{
          tab: gettext("yarn"),
          language: :bash,
          code: ~s"""
          yarn add @passwordless/node
          """
        },
        %{
          tab: gettext("pnpm"),
          language: :bash,
          code: ~s"""
          pnpm add @passwordless/node
          """
        },
        %{
          tab: gettext("bun"),
          language: :bash,
          code: ~s"""
          bun add @passwordless/node
          """
        }
      ]}
    />
  </.box>
  <.box card>
    <.form_header title={gettext("Setup")} no_margin />
    <.p>
      Initialize the Passwordless client by providing your app ID, Secret Key and the data residency region.
    </.p>
    <.live_component
      id="intro-code-block"
      module={PasswordlessWeb.Components.MultiCodeBlock}
      codes={[
        %{
          tab: gettext("Node.js"),
          language: :typescript,
          code: ~s"""
          import { Passwordless, Region } from "@passwordless/node";

          Passwordless.init({
            appId: "#{@app.id}",
            appSecretKey: "sk_live_*******",
            appRegion: Region.EU
          });
          """
        }
      ]}
    />
  </.box>

  <.box card>
    <.form_header title={gettext("Usage")} no_margin />
    <.p>
      You start by creating a new action - user login, settings page access, order placement. Passwordless will then decide whether to challenge the user via specified authenticators - Email, OTP, Magic Link etc.
    </.p>
    <.live_component
      id="multi-code-block"
      module={PasswordlessWeb.Components.MultiCodeBlock}
      codes={[
        %{
          tab: gettext("Node.js"),
          language: :typescript,
          code: ~s"""
          import { Passwordless } from "@passwordless/node";

          const action = Passwordless.authenticate({
            user:  {
              identifiers: [
                { kind: "username", value: "1234567890" },
              ],
              emails: [
                { address: "user@example.com" },
              ],
            },
            action: "signIn",
            device: {
              userAgent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
              ipAddress: "192.168.0.1",
            }
          });
          """
        }
      ]}
    />
    <.p>
      The code above create an Email OTP challenge and delivers the code to the user. Then, the user provides the code back to the application:
    </.p>
    <.code_block
      language={:typescript}
      code={
        ~s"""
        import { Passwordless } from "@passwordless/tools";

        const action = Passwordless.continue({
          action: {id: action.id},
          data: {
            otp_code: "123456",
          },
        });

        if (action.state === Passwordless.ALLOW) {
          console.log("User is allowed to continue");
        }
        """
      }
    />
  </.box>
</div>
