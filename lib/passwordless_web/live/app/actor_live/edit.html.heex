<.layout current_user={@current_user} current_page={:users} current_section={:app}>
  <.form id="edit-actor-form" for={@form} phx-change="validate" phx-submit="save">
    <div class="flex flex-col gap-6 p-6">
      <.subpage_header field={@form[:name]} placeholder={gettext("User's display name")}>
        <div class="flex gap-3">
          <.button
            to={@return_to}
            size="md"
            type="button"
            color="light"
            label={gettext("Cancel")}
            link_type="live_redirect"
          />
          <.button
            to={~p"/users/#{@actor}/edit/delete"}
            size="md"
            type="button"
            label={gettext("Delete")}
            icon="remix-delete-bin-line"
            color="danger"
            variant="outline"
            link_type="live_patch"
          />
          <.button
            size="md"
            type="submit"
            form="edit-actor-form"
            color="primary"
            label={gettext("Save")}
            icon="remix-save-line"
            disabled={not @form.source.valid? or Enum.empty?(@form.source.changes)}
          />
        </div>
      </.subpage_header>

      <div class="grid grid-cols-1 xl:grid-cols-5 gap-4">
        <div class="flex flex-col gap-4 xl:col-span-2">
          <.box padded>
            <.form_header title={gettext("Profile")} />
            <.field
              field={@form[:state]}
              type="select"
              options={@states}
              required
              required_asterix={false}
            />
            <.field
              field={@form[:language]}
              type="select"
              options={@languages}
              icon_class="pc-select-input__flag"
              icon_mapping={@flag_mapping}
              required
              required_asterix={false}
              disabled={not @user_active}
            />
            <.field
              field={@form[:username]}
              disabled={not @user_active}
              copyable={true}
              nonce={get_csp_nonce()}
              placeholder={gettext("Unique user ID from your own system")}
              autocomplete="username"
            />
            <%= if @property_editor do %>
              <.field
                type="textarea"
                field={@form[:properties_text]}
                label={gettext("Properties")}
                disabled={not @user_active}
                class="font-mono"
                rows={Util.count_json_lines(@user_properties)}
              />
              <.a
                label={gettext("Finish editing properties")}
                style="link"
                link_type="a"
                phx-click="toggle_property_editor"
                disabled={not @form.source.valid?}
              />
            <% else %>
              <.field
                type="hidden"
                field={@form[:properties_text]}
                value={Jason.encode!(@user_properties)}
              />
              <.json_block
                label={gettext("Properties")}
                code={@user_properties}
                disabled={not @user_active}
              />
              <div class="flex items-center gap-3 flex-wrap">
                <.a
                  label={gettext("Edit properties")}
                  style="link"
                  link_type="a"
                  phx-click="toggle_property_editor"
                />
                <.a
                  label={gettext("Add email")}
                  style="link"
                  link_type="live_patch"
                  to={~p"/users/#{@actor}/edit/email/new"}
                />
              </div>
            <% end %>
          </.box>
        </div>

        <div class="flex flex-col gap-4 2xl:col-span-3">
          <.simple_table items={@emails} title={gettext("Emails")}>
            <:if_empty>{gettext("No %{models} present", models: gettext("emails"))}</:if_empty>
            <:col field={:address} label={gettext("Email")} body_class="w-full" />
            <:col :let={email} field={:authenticators}>
              <div class="flex items-center gap-2">
                <.badge
                  :for={authn <- email.authenticators}
                  size="sm"
                  label={translate_authenticator(authn)}
                  color={random_color(authn)}
                />
              </div>
            </:col>
            <:col :let={email} field={:verified}>
              <.check_mark checked={email.verified} />
            </:col>
            <:col :let={email} field={:primary}>
              <.check_mark checked={email.primary} />
            </:col>
            <:col actions></:col>
            <:actions :let={email}>
              <.icon_button
                to={~p"/users/#{@actor}/edit/email/#{email}/delete"}
                size="sm"
                icon="custom-trash"
                color="light"
                title={gettext("Remove")}
                link_type="live_patch"
              />
              <.icon_button
                to={~p"/users/#{@actor}/edit/email/#{email}/edit"}
                size="sm"
                icon="custom-edit"
                color="light"
                title={gettext("Edit")}
                link_type="live_patch"
              />
            </:actions>
          </.simple_table>
          <.simple_table :if={false} items={[]} count={Enum.count([])} title={gettext("Passkeys")}>
            <:if_empty>{gettext("No %{models} present", models: gettext("passkeys"))}</:if_empty>
            <:col field={:name} body_class="w-full" />
            <:col actions></:col>
          </.simple_table>
          <.simple_table
            :if={not Enum.empty?(@totps)}
            items={@totps}
            count={Enum.count(@totps)}
            title={gettext("Time-based OTPs")}
          >
            <:if_empty>{gettext("No %{models} present", models: gettext("TOTPs"))}</:if_empty>
            <:col field={:name} body_class="w-full" />
            <:col actions></:col>
          </.simple_table>
          <div class={[unless(@finished, do: "pb-[calc(200vh)]")]}>
            <.box padded>
              <.form_header title={gettext("Timeline")} />
              <div
                id="uptime-events"
                role="list"
                class="flex flex-col"
                phx-target={@myself}
                phx-update="stream"
                phx-viewport-bottom={!@finished && "load_more"}
              >
                <.timeline_box :for={{id, action} <- @streams.actions} id={id}>
                  <% %{name: name, color: color, events: events} = verbalize_action(action) %>
                  <.p size="sm">
                    {format_relative(action.inserted_at)}
                  </.p>
                  <.alert color={color} with_icon>
                    {name}
                  </.alert>
                  <div class="p-2 rounded-lg border border-slate-200 dark:border-slate-700/40">
                    <.ul class="list-none text-sm text-slate-400 dark:text-slate-500">
                      <li :for={event <- events}>{event.name}</li>
                    </.ul>
                  </div>
                </.timeline_box>
              </div>
            </.box>
          </div>
        </div>
      </div>
    </div>
  </.form>
</.layout>

<%= case @live_action do %>
  <% :new_email -> %>
    <.live_component
      id={@live_action}
      title={@page_title}
      subtitle={@page_subtitle}
      email={Ecto.build_assoc(@actor, :emails)}
      actor={@actor}
      app={@current_app}
      module={PasswordlessWeb.App.ActorLive.EmailComponent}
      live_action={@live_action}
      current_org={@current_org}
      current_app={@current_app}
      current_user={@current_user}
      return_to={~p"/users/#{@actor}/edit"}
    />
  <% :edit_email -> %>
    <.live_component
      id={@live_action}
      title={@page_title}
      subtitle={@page_subtitle}
      email={@email}
      actor={@actor}
      app={@current_app}
      module={PasswordlessWeb.App.ActorLive.EmailComponent}
      live_action={@live_action}
      current_org={@current_org}
      current_app={@current_app}
      current_user={@current_user}
      return_to={~p"/users/#{@actor}/edit"}
    />
  <% :new_phone -> %>
    <.live_component
      id={@live_action}
      title={@page_title}
      subtitle={@page_subtitle}
      phone={Ecto.build_assoc(@actor, :phones)}
      actor={@actor}
      app={@current_app}
      module={PasswordlessWeb.App.ActorLive.PhoneComponent}
      live_action={@live_action}
      current_org={@current_org}
      current_app={@current_app}
      current_user={@current_user}
      return_to={~p"/users/#{@actor}/edit"}
    />
  <% :edit_phone -> %>
    <.live_component
      id={@live_action}
      title={@page_title}
      subtitle={@page_subtitle}
      phone={@phone}
      actor={@actor}
      app={@current_app}
      module={PasswordlessWeb.App.ActorLive.PhoneComponent}
      live_action={@live_action}
      current_org={@current_org}
      current_app={@current_app}
      current_user={@current_user}
      return_to={~p"/users/#{@actor}/edit"}
    />
  <% :edit_properties -> %>
    <.live_component
      id={@live_action}
      title={@page_title}
      subtitle={@page_subtitle}
      actor={@actor}
      app={@current_app}
      module={PasswordlessWeb.App.ActorLive.PropertiesComponent}
      live_action={@live_action}
      current_org={@current_org}
      current_app={@current_app}
      current_user={@current_user}
      return_to={~p"/users/#{@actor}/edit"}
    />
  <% :delete -> %>
    <.modal
      max_width="lg"
      title={@page_title}
      subtitle={@page_subtitle}
      variant="delete"
      hide_close_button
    >
      <div class="flex justify-end gap-3">
        <.button
          size="md"
          label="Cancel"
          color="light"
          phx-click={JS.exec("data-cancel", to: "#modal")}
        />
        <.button
          icon="remix-delete-bin-line"
          size="md"
          label={gettext("Yes, Delete \"%{actor}\"", actor: Util.truncate(Actor.handle(@actor)))}
          color="danger"
          phx-click="delete_actor"
        />
      </div>
    </.modal>
  <% :delete_email -> %>
    <.modal
      max_width="lg"
      title={@page_title}
      subtitle={@page_subtitle}
      variant="delete"
      hide_close_button
    >
      <div class="flex justify-end gap-3">
        <.button
          size="md"
          label="Cancel"
          color="light"
          phx-click={JS.exec("data-cancel", to: "#modal")}
        />
        <.button
          icon="remix-delete-bin-line"
          size="md"
          label={gettext("Yes, Delete \"%{email}\"", email: @email.address)}
          color="danger"
          phx-click="delete_email"
        />
      </div>
    </.modal>
  <% :delete_phone-> %>
    <.modal
      max_width="lg"
      title={@page_title}
      subtitle={@page_subtitle}
      variant="delete"
      hide_close_button
    >
      <div class="flex justify-end gap-3">
        <.button
          size="md"
          label="Cancel"
          color="light"
          phx-click={JS.exec("data-cancel", to: "#modal")}
        />
        <.button
          icon="remix-delete-bin-line"
          size="md"
          label={gettext("Yes, Delete \"%{phone}\"", phone: Phone.format(@phone))}
          color="danger"
          phx-click="delete_email"
        />
      </div>
    </.modal>
  <% _ -> %>
<% end %>
