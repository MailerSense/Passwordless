<.layout current_user={@current_user} current_page={:users} current_section={:app}>
  <.page_header title={gettext("Users")}>
    <div class="flex gap-3">
      <.button
        to={~p"/app/users/import"}
        size="md"
        color="light"
        label={gettext("Import")}
        icon="remix-download-line"
        link_type="live_patch"
      />
      <.button
        to={~p"/app/users/new"}
        size="md"
        color="primary"
        label={gettext("Create")}
        icon="remix-add-circle-line"
        link_type="live_patch"
      />
    </div>
  </.page_header>

  <div class="flex flex-col gap-6">
    <.data_table
      meta={@meta}
      items={@actors}
      title={gettext("All users")}
      switch_items={
        [
          %{name: :all, label: gettext("All"), clear: true}
        ] ++ Enum.map(Actor.states(), &%{name: &1, label: Phoenix.Naming.humanize(&1)})
      }
    >
      <:if_empty>{gettext("No %{models} found", models: gettext("users"))}</:if_empty>
      <:col field={:search} searchable filterable={[:==]} />
      <:col
        :let={actor}
        field={:name}
        sortable
        body_class="!font-medium !text-slate-900 dark:!text-white"
      >
        {Actor.handle(actor)}
      </:col>
      <:col :let={actor} field={:email} sortable>
        <.a
          to={~p"/app/users/#{actor}/edit"}
          class="text-info-600 dark:text-info-300 hover:underline"
          label={Actor.email(actor)}
          link_type="live_redirect"
        />
      </:col>
      <:col :let={actor} field={:phone} sortable>
        {Actor.phone(actor)}
      </:col>
      <:col :let={actor} field={:state} sortable switchable filterable={[:==]}>
        <% {badge_label, badge_color} = actor_state_badge(actor) %>
        <.badge size="sm" label={badge_label} color={badge_color} />
      </:col>
      <:col :let={actor} label={gettext("Joined")} field={:inserted_at} sortable>
        {format_date_time(actor.inserted_at)}
      </:col>
      <:col actions></:col>
      <:actions :let={actor}>
        <.dropdown placement="left">
          <:trigger_element>
            <.icon name="custom-more-dots" class="w-6 h-6" />
          </:trigger_element>
          <.dropdown_menu_item link_type="live_redirect" to={~p"/app/users/#{actor}/edit"}>
            <.icon name="remix-pencil-line" class="w-6 h-6 shrink-0" />
            {gettext("Edit")}
          </.dropdown_menu_item>
          <.dropdown_menu_item link_type="live_patch" to={~p"/app/users/#{actor}/delete"}>
            <.icon
              name="remix-delete-bin-line"
              class="w-6 h-6 shrink-0 text-danger-700 dark:text-danger-400"
            />
            <span class="text-danger-700 dark:text-danger-400">{gettext("Delete")}</span>
          </.dropdown_menu_item>
        </.dropdown>
      </:actions>
    </.data_table>
  </div>
</.layout>

<%= case @live_action do %>
  <% :new -> %>
    <.live_component
      id={@live_action}
      title={@page_title}
      subtitle={@page_subtitle}
      actor={Ecto.build_assoc(@current_app, :actors)}
      module={PasswordlessWeb.App.ActorLive.FormComponent}
      live_action={@live_action}
      current_org={@current_org}
      current_app={@current_app}
      current_user={@current_user}
      return_to={apply_filters(@filters, @meta, ~p"/app/users")}
    />
  <% :delete -> %>
    <.modal
      max_width="lg"
      title={@page_title}
      subtitle={@page_subtitle}
      variant="delete"
      hide_close_button
    >
      <div class="flex justify-end gap-3">
        <.button
          size="md"
          label="Cancel"
          color="light"
          phx-click={JS.exec("data-cancel", to: "#modal")}
        />
        <.button
          icon="remix-delete-bin-line"
          size="md"
          label={gettext("Yes, Delete \"%{actor}\"", actor: Actor.handle(@actor))}
          color="danger"
          phx-click="delete_actor"
          phx-value-id={@actor.id}
        />
      </div>
    </.modal>
  <% :import -> %>
    <.live_component
      id={@live_action}
      title={@page_title}
      subtitle={@page_subtitle}
      module={PasswordlessWeb.App.ActorLive.ImportComponent}
      live_action={@live_action}
      current_org={@current_org}
      current_user={@current_user}
      return_to={apply_filters(@filters, @meta, ~p"/app/users")}
    />
  <% _ -> %>
<% end %>
