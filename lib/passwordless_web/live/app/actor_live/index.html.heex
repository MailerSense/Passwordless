<.layout current_user={@current_user} current_page={:users} current_section={:app}>
  <div class="flex flex-col gap-6">
    <div>
      <.form_header title="Users" />
      <p class="text-slate-500 dark:text-slate-400">
        Every time your users use Passwordless authentication to perform an action, their details are stored here. You can view, edit, and delete users as needed.
      </p>
    </div>

    <.data_table
      meta={@meta}
      items={@actors}
      title={gettext("All users", app: @current_app.name)}
      switch_items={
        [
          %{name: :all, label: gettext("All"), clear: true}
        ] ++ Enum.map(Actor.states(), &%{name: &1, label: Phoenix.Naming.humanize(&1)})
      }
    >
      <:if_empty>{gettext("No %{models} found", models: gettext("users"))}</:if_empty>
      <:col field={:search} searchable filterable={[:==]} />
      <:col :let={actor} field={:name} sortable>
        <.a
          to={~p"/app/users/#{actor}/edit"}
          label={Actor.handle(actor)}
          styled
          link_type="live_redirect"
        />
      </:col>
      <:col :let={actor} field={:email} sortable>
        {Actor.email(actor)}
      </:col>
      <:col :let={actor} field={:phone} sortable>
        <% phone = Actor.phone(actor) %>
        <div :if={Util.present?(phone)} class="flex items-center gap-2">
          <.icon name={"flag-#{Actor.phone_region(actor)}"} class="pc-flag-icon" /> {phone}
        </div>
      </:col>
      <:col :let={actor} field={:state} sortable switchable filterable={[:==]}>
        <% {badge_label, badge_color} = actor_state_badge(actor) %>
        <.badge with_dot size="sm" label={badge_label} color={badge_color} />
      </:col>
      <:col :let={actor} label={gettext("Added")} field={:inserted_at} sortable>
        {format_date(actor.inserted_at)}
      </:col>
      <:col actions></:col>
      <:actions :let={actor}>
        <.icon_button
          to={~p"/app/users/#{actor}/delete"}
          size="sm"
          icon="custom-trash"
          color="light"
          title={gettext("Remove")}
          link_type="live_patch"
        />
        <.icon_button
          to={~p"/app/users/#{actor}/edit"}
          size="sm"
          icon="custom-edit"
          color="light"
          title={gettext("Edit")}
          link_type="live_patch"
        />
      </:actions>
      <:header_actions>
        <div class="flex gap-3">
          <.button
            to={apply_filters(@filters, @meta, ~p"/app/users/import")}
            size="xs"
            color="light"
            label={gettext("Import")}
            icon="remix-download-line"
            link_type="live_patch"
          />
          <.button
            to={apply_filters(@filters, @meta, ~p"/app/users/new")}
            size="xs"
            color="primary"
            label={gettext("Create")}
            icon="remix-add-circle-line"
            link_type="live_patch"
          />
        </div>
      </:header_actions>
    </.data_table>
  </div>
</.layout>

<%= case @live_action do %>
  <% :new -> %>
    <.live_component
      id={@live_action}
      title={@page_title}
      subtitle={@page_subtitle}
      actor={%Actor{}}
      module={PasswordlessWeb.App.ActorLive.FormComponent}
      live_action={@live_action}
      current_org={@current_org}
      current_app={@current_app}
      current_user={@current_user}
      return_to={apply_filters(@filters, @meta, ~p"/app/users")}
    />
  <% :delete -> %>
    <.modal
      max_width="lg"
      title={@page_title}
      subtitle={@page_subtitle}
      variant="delete"
      hide_close_button
    >
      <div class="flex justify-end gap-3">
        <.button
          size="md"
          label="Cancel"
          color="light"
          phx-click={JS.exec("data-cancel", to: "#modal")}
        />
        <.button
          icon="remix-delete-bin-line"
          size="md"
          label={gettext("Yes, Delete \"%{actor}\"", actor: Actor.handle(@actor))}
          color="danger"
          phx-click="delete_actor"
          phx-value-id={@actor.id}
        />
      </div>
    </.modal>
  <% :import -> %>
    <.live_component
      id={@live_action}
      title={@page_title}
      subtitle={@page_subtitle}
      module={PasswordlessWeb.App.ActorLive.ImportComponent}
      live_action={@live_action}
      current_org={@current_org}
      current_user={@current_user}
      return_to={apply_filters(@filters, @meta, ~p"/app/users")}
    />
  <% _ -> %>
<% end %>
