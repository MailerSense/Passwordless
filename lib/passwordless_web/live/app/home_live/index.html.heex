<.layout current_user={@current_user} current_page={:home} current_section={:app}>
  <div class="flex flex-col gap-6 px-8 py-6">
    <.box card>
      <.form_header title={gettext("Top actions")} no_margin />
      <.p>
        {gettext(
          "Here are the top actions your users performed between %{period}.",
          period: format_month_range(Date.utc_today())
        )}
      </.p>
      <.action_stat
        legend={[
          %{color: "bg-success-500", label: gettext("Allow")},
          %{color: "bg-warning-500", label: gettext("Timeout")},
          %{color: "bg-danger-500", label: gettext("Block")}
        ]}
        items={@top_actions}
      />
    </.box>
    <.box card>
      <.form_header title={gettext("Authenticators")} no_margin />
      <.p>
        {gettext(
          "Enable authentication methods users can use to prove their identity within your app."
        )}
      </.p>
      <div class="grid grid-cols-5 divide-x divide-gray-200 dark:divide-gray-700">
        <.quick_action
          :for={item <- @authenticators |> Enum.take(5)}
          to={item.path}
          enabled={item.enabled}
          subtitle="Enabled"
          title={item.label}
          icon={item.icon}
          link_type="live_redirect"
        />
      </div>
    </.box>
    <.box card>
      <.form_header title={gettext("Installation")} no_margin />
      <.p>
        Passwordless is a drop-in solution for your authentication needs. Follow the instructions below to get started.
      </.p>
      <.live_component
        id="installation-intro"
        module={PasswordlessWeb.Components.MultiCodeBlock}
        codes={[
          %{
            tab: gettext("Bash"),
            language: :bash,
            code: ~s"""
            ## Get Current App
            curl "#{PasswordlessWeb.Router.Helpers.app_url(PasswordlessWeb.Endpoint, :show)}" \\
                -H 'Authorization: Bearer #{"sk_live_*******"}'
            """
          },
          %{
            tab: gettext("Typescript"),
            language: :typescript,
            code: ~s"""
            // First, install the SDK
            // pnpm add @passwordless/tools

            import { Passwordless, Residency } from '@passwordless/tools';

            const secret = process.env.PASSWORDLESS_APP_SECRET;
            if (!secret) {
              throw new Error("PASSWORDLESS_APP_SECRET is undefined");
            }

            const residency = Residency.EU;

            Passwordless.init({ secret, residency });
            """
          }
        ]}
      />

      <div class="flex items-center gap-3 flex-wrap">
        <.a
          label={gettext("Read documentation")}
          to={~p"/embed/install"}
          style="link"
          link_type="live_redirect"
        />
      </div>
    </.box>

    <.stream_table
      id="actions"
      meta={@meta}
      title={gettext("Recent events")}
      items={@streams.actions}
      finished={@finished}
    >
      <:if_empty>{gettext("No %{models} found", models: gettext("events"))}</:if_empty>

      <:col :let={action} label={gettext("Event")} field={:name}>
        <.code_line>{action.action_template.alias}</.code_line>
      </:col>

      <:col :let={action} label={gettext("Country")} field={:country}>
        <%= case Action.first_event(action) do %>
          <% %Event{city: city, country: country} when is_binary(city) and is_binary(country) -> %>
            <div class="flex items-center gap-2">
              <.icon name={"flag-#{String.downcase(country)}"} class="pc-flag-icon" /> {city}
            </div>
          <% _ -> %>
        <% end %>
      </:col>

      <:col :let={action} label={gettext("Browser")} field={:browser}>
        <%= case Action.first_event(action) do %>
          <% %Event{browser: browser} when is_binary(browser) -> %>
            <div class="flex items-center gap-2">
              <.icon name={"browser-#{browser_to_icon(browser)}"} class="w-5 h-5" /> {browser}
            </div>
          <% _ -> %>
        <% end %>
      </:col>

      <:col :let={action} label={gettext("Operating System")} field={:os}>
        <%= case Action.first_event(action) do %>
          <% %Event{operating_system: operating_system} when is_binary(operating_system) -> %>
            <div class="flex items-center gap-2">
              <.icon name={"os-#{os_to_icon(operating_system)}"} class="w-5 h-5" /> {operating_system}
            </div>
          <% _ -> %>
        <% end %>
      </:col>

      <:col :let={action} label={gettext("Device")} field={:device}>
        <%= case Action.first_event(action) do %>
          <% %Event{device_type: device_type} when is_binary(device_type) -> %>
            <div class="flex items-center gap-2">
              <.icon name={device_type_to_icon(device_type)} class="w-5 h-5" /> {Recase.to_sentence(
                device_type
              )}
            </div>
          <% _ -> %>
        <% end %>
      </:col>

      <:col :let={action} label={gettext("Last Seen")} field={:inserted_at}>
        {Timex.from_now(action.inserted_at)}
      </:col>
      <:col actions></:col>

      <:actions :let={action}>
        <.a
          :if={Util.present?(action.user)}
          to={~p"/users/#{action.user}/edit"}
          label={gettext("User")}
          style="link"
          link_type="live_patch"
        />
      </:actions>
    </.stream_table>
  </div>
</.layout>

<%= case @live_action do %>
  <% :view -> %>
    <.live_component
      id={@live_action}
      title={@page_title}
      subtitle={@page_subtitle}
      action={@action}
      module={PasswordlessWeb.App.HomeLive.ViewComponent}
      live_action={@live_action}
      return_to={~p"/home"}
    />
  <% _ -> %>
<% end %>
