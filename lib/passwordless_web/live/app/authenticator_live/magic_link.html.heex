<div class="flex flex-col p-6 gap-6">
  <.form
    id="edit-magic-link-form"
    for={@form}
    phx-target={@myself}
    phx-submit="save"
    phx-change="validate"
    class="flex flex-col gap-6"
  >
    <.box padded>
      <.form_header title={gettext("Magic link")} />
      <.p class="mb-6">
        Magic link authentication creates a unique link for authenticating user actions that can only be used one time.
      </.p>
      <.field type="checkbox" field={@form[:enabled]} />
      <div class="grid gap-6 grid-cols-1 2xl:grid-cols-2 mb-6">
        <.field
          field={@form[:sender_name]}
          label={gettext("Name")}
          disabled={not @enabled}
          required
          wrapper_class="mb-0!"
        />
        <.field
          field={@form[:sender]}
          label={gettext("Email")}
          suffix={Domain.email_suffix(@domain)}
          readonly={Domain.system?(@domain)}
          disabled={not @enabled}
          required
          wrapper_class="mb-0!"
        />
      </div>
      <.alert :if={Domain.system?(@domain)} color="info" with_icon class="mb-6">
        Do you want to send branded emails?
        <.a
          to={~p"/domain"}
          label={gettext("Set up domain")}
          style="link"
          class="inline-flex"
          link_type="live_redirect"
        />
      </.alert>
      <.email_preview
        to={~p"/emails/#{@email_template}/en/edit?return_to=#{~p"/authenticators/magic-link"}"}
        name={gettext("Edit email template")}
        preview={@preview}
        link_type="live_redirect"
      />
      <.a
        to={~p"/emails/#{@email_template}/en/edit?return_to=#{~p"/authenticators/magic-link"}"}
        label={gettext("Edit email template")}
        style="link"
        link_type="live_redirect"
      />
      <.form_separator />
      <div class="grid gap-6 grid-cols-1 2xl:grid-cols-2 mb-6">
        <.field
          field={@form[:expires]}
          type="number"
          min="1"
          max="30"
          prefix={gettext("After")}
          suffix={gettext("minutes")}
          disabled={not @enabled}
          required
          wrapper_class="mb-0!"
        />
        <.field
          field={@form[:resend]}
          type="number"
          min="30"
          max="300"
          prefix={gettext("Possible after")}
          suffix={gettext("seconds")}
          disabled={not @enabled}
          required
          wrapper_class="mb-0!"
        />
      </div>
      <.field
        field={@form[:behavior]}
        prefix={gettext("Once link is clicked")}
        type="select"
        options={@behaviors}
        required
      />
      <div class="pc-form-field-wrapper">
        <.field_label required>{gettext("Redirect URLs")}</.field_label>
        <div class="flex flex-col gap-y-2">
          <.inputs_for :let={f} field={@form[:redirect_urls]}>
            <input type="hidden" name="magic_link[redirect_urls_sort][]" value={f.index} />
            <div class="flex items-center grow gap-2">
              <.field
                type="url"
                label=""
                field={f[:url]}
                required
                disabled={not @enabled}
                wrapper_class="mb-0! w-full grow"
              >
                <:action>
                  <.icon_form_button
                    size="sm"
                    name="magic_link[redirect_urls_drop][]"
                    type="button"
                    icon="custom-trash"
                    color="light"
                    title={gettext("Remove")}
                    value={f.index}
                    event={JS.dispatch("change")}
                    disabled={not @enabled or f.index == 0}
                  />
                </:action>
              </.field>
            </div>
          </.inputs_for>
        </div>
        <div class="flex mt-3">
          <.button
            size="xs"
            type="button"
            color="light"
            icon="remix-add-circle-line"
            label={gettext("Add URL")}
            name="magic_link[redirect_urls_sort][]"
            value="new"
            disabled={not @enabled}
            phx-click={JS.dispatch("change")}
          />
        </div>
        <input type="hidden" name="magic_link[redirect_urls_drop][]" />
      </div>
    </.box>
  </.form>

  <.box card>
    <.form_header title="API - Authenticate with Magic link" no_margin />
    <.p>
      First, call the Backend API to authenticate a user-triggered action. This API call will send a magic link to the user via email, and return an action object. You'll then need to create a link handler in your application to handle the magic link.
    </.p>
    <.live_component
      id="magic-link-intro"
      module={PasswordlessWeb.Components.MultiCodeBlock}
      codes={[
        %{
          tab: gettext("Bash"),
          language: :bash,
          code: ~s"""
          ## Send Magic Link
          curl -X "POST" "#{PasswordlessWeb.Router.Helpers.action_url(PasswordlessWeb.Endpoint, :authenticate)}" \\
              -H 'Authorization: Bearer sk_live_******' \\
              -H 'Idempotency-Key: 123ws' \\
              -H 'Content-Type: application/json; charset=utf-8' \\
              -d $'{
            "ip_address": "78.30.98.85",
            "user": {
              "username": "test1",
              "emails": [
                {
                  "address": "marcin.praski@opentide.com",
                  "primary": true
                }
              ]
            },
            "rules": [
              {
                "then": [
                  {
                    "challenge": "email"
                  }
                ],
                "if": true
              }
            ],
            "action": "login"
          }'
          """
        },
        %{
          tab: gettext("Typescript"),
          language: :typescript,
          code: ~s"""
          import { Passwordless } from "@passwordless/tools";

          const action = Passwordless.authenticate({
            action: "login",
            actor: {
              username: "1234567890",
              emails: [
                { address: "user@example.com" },
              ],
            },
            rules: [
              {
                if: true, then: [{ challenge: Passwordless.EMAIL_OTP }],
              },
            ],
          });
          """
        }
      ]}
    />
    <.p>
      The code above create an Email OTP challenge and delivers the code to the user. Then, the user provides the code back to the application.
    </.p>
    <.live_component
      id="magic-link-webhook"
      module={PasswordlessWeb.Components.MultiCodeBlock}
      codes={[
        %{
          tab: gettext("Bash"),
          language: :bash,
          code: ~s"""
          ## Receive Magic Link
          curl -X "POST" "#{PasswordlessWeb.Router.Helpers.action_url(PasswordlessWeb.Endpoint, :authenticate)}" \\
              -H 'Authorization: Bearer sk_live_******' \\
              -H 'Idempotency-Key: 123ws' \\
              -H 'Content-Type: application/json; charset=utf-8' \\
              -d $'{
            "action": {
              "id": "test1"
            },
            "data": {
              "magic_link_code": "code"
            },
          }'
          """
        },
        %{
          tab: gettext("Typescript"),
          language: :typescript,
          code: ~s"""
          import { Passwordless, Action } from "@passwordless/tools";

          const action = Passwordless.continue({
            data: {
              magic_link_code: code,
            },
          });

          if (action.state === Action.ALLOW) {
            console.log("User is allowed to continue");
          }
          """
        }
      ]}
    />

    <.a
      to={~p"/embed/api"}
      label={gettext("Read full documentation")}
      style="link"
      link_type="live_redirect"
    />
  </.box>
</div>
