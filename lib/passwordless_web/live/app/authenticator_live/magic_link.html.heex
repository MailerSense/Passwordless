<div>
  <.form
    id="edit-magic-link-form"
    for={@form}
    phx-target={@myself}
    phx-submit="save"
    phx-change="validate"
    class="p-6"
  >
    <.field type="checkbox" field={@form[:enabled]} />
    <.p>
      Magic link allows users to sign in without a password. When enabled, users will receive an email with a link that will sign them in. The link is valid for a limited time and can only be used once.
    </.p>
    <.form_separator />
    <.alert :if={Domain.system?(@domain)} color="info" class="mb-6" with_icon>
      Do you want to send emails from your own domain?
      <.a
        to={~p"/domain"}
        label={gettext("Set up domain")}
        style="link"
        class="inline"
        link_type="live_redirect"
      />
    </.alert>
    <div class="grid gap-6 grid-cols-1 2xl:grid-cols-2 mb-6">
      <.field field={@form[:sender_name]} disabled={not @enabled} required wrapper_class="mb-0!" />
      <.field
        field={@form[:sender]}
        label={gettext("Sender email")}
        suffix={Domain.email_suffix(@domain)}
        readonly={Domain.system?(@domain)}
        disabled={not @enabled}
        required
        wrapper_class="mb-0!"
      />
    </div>

    <.email_preview
      to={~p"/emails/#{@email_template}/en/edit?return_to=#{~p"/authenticators/magic-link"}"}
      name={gettext("Edit email template")}
      preview={@preview}
      link_type="live_redirect"
    />
    <div class="flex items-center gap-3 flex-wrap">
      <.a
        to={~p"/pricing/free"}
        label={gettext("Review pricing")}
        style="link"
        link_type="live_redirect"
      />
      <.a
        to={~p"/emails/#{@email_template}/en/edit?return_to=#{~p"/authenticators/magic-link"}"}
        label={gettext("Edit email template")}
        style="link"
        link_type="live_redirect"
      />
    </div>
    <.form_separator />
    <.form_header title="Advanced" />
    <.field
      type="checkbox"
      field={@form[:fingerprint_device]}
      help_text={
        gettext(
          "This cookie will then be sent automatically by the browser when the user clicks on the magic link, and we can verify the link was opened in the same browser it was requested."
        )
      }
      disabled={not @enabled}
    />
    <.field
      field={@form[:expires]}
      type="number"
      label={gettext("Expires")}
      prefix={gettext("After")}
      suffix={gettext("minutes")}
      disabled={not @enabled}
      required
    />

    <div class="pc-form-field-wrapper">
      <.field_label required>{gettext("Redirect URLs")}</.field_label>
      <div class="flex flex-col gap-y-2">
        <.inputs_for :let={f} field={@form[:redirect_urls]}>
          <input type="hidden" name="magic_link[redirect_urls_sort][]" value={f.index} />
          <div class="flex items-center grow gap-2">
            <.field
              type="url"
              label=""
              field={f[:url]}
              required
              disabled={not @enabled}
              wrapper_class="mb-0! w-full grow"
            >
              <:action>
                <.icon_form_button
                  size="sm"
                  name="magic_link[redirect_urls_drop][]"
                  type="button"
                  icon="custom-trash"
                  color="light"
                  title={gettext("Remove")}
                  value={f.index}
                  event={JS.dispatch("change")}
                  disabled={not @enabled}
                />
              </:action>
            </.field>
          </div>
        </.inputs_for>
      </div>
      <div class="flex mt-4">
        <.button
          size="xs"
          type="button"
          color="light"
          icon="remix-add-circle-line"
          label={gettext("Add redirect URL")}
          name="magic_link[redirect_urls_sort][]"
          value="new"
          disabled={not @enabled}
          phx-click={JS.dispatch("change")}
        />
      </div>
      <input type="hidden" name="magic_link[redirect_urls_drop][]" />
    </div>

    <.form_separator />
    <.form_header title="API - Send magic link" />
    <.code_block
      class="mb-6"
      language={:typescript}
      code={
        ~s"""
        import hljs from "highlight.js/lib/core";
        import { Hook, makeHook } from "./typed-hook";

        class HighlightHook extends Hook {
          public mounted() {
            this.run("mounted", this.el);
          }

          public updated() {
            this.run("updated", this.el);
          }

          private run(_lifecycleMethod: "mounted" | "updated", el: HTMLElement) {
            hljs.highlightElement(el.querySelector("code")!);
          }
        }

        export default makeHook(HighlightHook);
        """
      }
    />
    <.a
      to={~p"/embed/api"}
      label={gettext("Read full documentation")}
      style="link"
      link_type="live_redirect"
    />
  </.form>
</div>
