<div class="flex flex-col p-6 gap-6">
  <.form
    id="edit-email-form"
    for={@form}
    phx-target={@myself}
    phx-submit="save"
    phx-change="validate"
    class="flex flex-col gap-6"
  >
    <.box padded>
      <.form_header title={gettext("Email OTP")} />
      <.p class="mb-6">
        Email OTP is a one-time code sent to the user via email, which the user then enters to authenticate.
      </.p>
      <.field type="checkbox" field={@form[:enabled]} />
      <div class="grid gap-6 grid-cols-1 2xl:grid-cols-2 mb-6">
        <.field
          field={@form[:sender_name]}
          label={gettext("Name")}
          prefix={gettext("From")}
          disabled={not @enabled}
          required
          required_asterix={false}
          wrapper_class="mb-0!"
        />
        <.field
          field={@form[:sender]}
          label={gettext("Email")}
          suffix={Domain.email_suffix(@domain)}
          readonly={Domain.system?(@domain)}
          disabled={not @enabled}
          required
          required_asterix={false}
          wrapper_class="mb-0!"
        />
      </div>
      <.alert :if={Domain.system?(@domain)} color="info" with_icon class="mb-6">
        Do you want to send branded emails?
        <.a
          to={~p"/domain"}
          label={gettext("Set up domain")}
          style="link"
          class="inline-flex"
          link_type="live_redirect"
        />
      </.alert>
      <.email_preview
        to={~p"/emails/#{@email_template}/en/edit?return_to=#{~p"/authenticators/email-otp"}"}
        name={gettext("Edit email template")}
        preview={@preview}
        link_type="live_redirect"
      />
      <.a
        to={~p"/emails/#{@email_template}/en/edit?return_to=#{~p"/authenticators/email-otp"}"}
        label={gettext("Edit email template")}
        style="link"
        link_type="live_redirect"
      />
      <.form_separator />
      <.field
        field={@form[:expires]}
        type="number"
        min="1"
        max="30"
        prefix={gettext("After")}
        suffix={gettext("minutes")}
        disabled={not @enabled}
        required
        required_asterix={false}
      />
      <.field
        field={@form[:resend]}
        type="number"
        min="30"
        max="300"
        prefix={gettext("Possible after")}
        suffix={gettext("seconds")}
        disabled={not @enabled}
        required
        required_asterix={false}
      />
      <.field
        field={@form[:attempts]}
        label={gettext("Invalidate")}
        type="number"
        min="1"
        max="5"
        prefix={gettext("After wrong code is entered")}
        suffix={gettext("times")}
        disabled={not @enabled}
        required
        required_asterix={false}
      />
    </.box>
  </.form>
  <.box card>
    <.form_header title="API - Authenticate with Email OTP" no_margin />
    <.p>
      The Email OTP authenticator can be used to authenticate users via email. The user provides their email address and the application sends a one-time code to the user. The user then provides the code back to the application.
    </.p>
    <.live_component
      id="installation-intro"
      module={PasswordlessWeb.Components.MultiCodeBlock}
      codes={[
        %{
          tab: gettext("Bash"),
          language: :bash,
          code: ~s"""
          ## Authenicate Action
          curl -X "POST" "#{PasswordlessWeb.Router.Helpers.action_url(PasswordlessWeb.Endpoint, :authenticate)}" \\
              -H 'Authorization: Bearer sk_live_******' \\
              -H 'Idempotency-Key: 123ws' \\
              -H 'Content-Type: application/json; charset=utf-8' \\
              -d $'{
            "ip_address": "78.30.98.85",
            "user": {
              "username": "test1",
              "emails": [
                {
                  "address": "marcin.praski@opentide.com",
                  "primary": true
                }
              ]
            },
            "rules": [
              {
                "then": [
                  {
                    "challenge": "email"
                  }
                ],
                "if": true
              }
            ],
            "action": "login"
          }'
          """
        },
        %{
          tab: gettext("Typescript"),
          language: :typescript,
          code: ~s"""
          import { Passwordless } from "@passwordless/tools";

          const action = Passwordless.authenticate({
            action: "login",
            user:  {
              username: "1234567890",
              emails: [
                { address: "user@example.com" },
              ],
            },
            rules: [
              {
                if: true, then: [{ challenge: Passwordless.EMAIL_OTP }],
              },
            ],
          });
          """
        }
      ]}
    />
    <.p>
      The code above create an Email OTP challenge and delivers the code to the user. Then, the user provides the code back to the application:
    </.p>
    <.code_block
      language={:typescript}
      code={
        ~s"""
        import { Passwordless } from "@passwordless/tools";

        const action = Passwordless.continue({
          action: {id: action.id},
          data: {
            otp_code: "123456",
          },
        });

        if (action.state === Passwordless.ALLOW) {
          console.log("User is allowed to continue");
        }
        """
      }
    />
    <.a
      to={~p"/embed/api"}
      label={gettext("Read full documentation")}
      style="link"
      link_type="live_redirect"
    />
  </.box>
</div>
