<.layout current_user={@current_user} current_page={:users} current_section={:app}>
  <div class="flex flex-col gap-6 px-8 py-6">
    <.data_table
      meta={@meta}
      items={@users}
      title={gettext("Users")}
      search_placeholder={gettext("Search by email or user ID")}
    >
      <:if_empty>{gettext("No %{models} found", models: gettext("users"))}</:if_empty>
      <:col field={:search} searchable filterable={[:==]} />
      <:col :let={user} field={:email} sortable>
        <div class="flex items-center gap-3">
          <.avatar name={user.email.address} color="blue" />
          {User.email(user)}
        </div>
      </:col>

      <:col :let={user} field={:last_action_state} label={gettext("Last Result")}>
        <% {badge_label, badge_color} =
          action_state_badge(%Passwordless.Action{state: user.last_action_state}) %>
        <.badge with_dot size="sm" label={badge_label} color={badge_color} />
      </:col>

      <:col :let={actor} label={gettext("Added")} field={:inserted_at} sortable>
        {format_date(actor.inserted_at)}
      </:col>

      <:col :let={user} field={:allow_rate} label={gettext("Allow Rate")} sortable>
        <.progress
          label
          color="primary"
          value={user.action_allow}
          max={user.action_all}
          class="flex-grow min-w-16"
        />
      </:col>

      <:col actions></:col>
      <:actions :let={user}>
        <.icon_button
          to={apply_filters(@filters, @meta, ~p"/users/#{user}/delete")}
          size="sm"
          icon="custom-trash"
          color="light"
          title={gettext("Remove")}
          link_type="live_patch"
        />
        <.icon_button
          to={apply_filters(@filters, @meta, ~p"/users/#{user}/edit")}
          size="sm"
          icon="custom-edit"
          color="light"
          title={gettext("Edit")}
          link_type="live_patch"
        />
      </:actions>
      <:header_actions>
        <div class="flex gap-3">
          <.button
            to={apply_filters(@filters, @meta, ~p"/users/import")}
            color="light"
            label={gettext("Import")}
            icon="remix-download-line"
            link_type="live_patch"
          />
          <.button
            to={apply_filters(@filters, @meta, ~p"/users/new")}
            color="primary"
            label={gettext("Create")}
            icon="remix-add-circle-line"
            link_type="live_patch"
          />
        </div>
      </:header_actions>
    </.data_table>
  </div>
</.layout>

<%= case @live_action do %>
  <% :new -> %>
    <.live_component
      id={@live_action}
      title={@page_title}
      subtitle={@page_subtitle}
      user={%User{}}
      module={PasswordlessWeb.App.UserLive.FormComponent}
      live_action={@live_action}
      current_org={@current_org}
      current_app={@current_app}
      current_user={@current_user}
      return_to={apply_filters(@filters, @meta, ~p"/users")}
    />
  <% :edit -> %>
    <.live_component
      id={@live_action}
      title={@page_title}
      subtitle={@page_subtitle}
      user={@user}
      module={PasswordlessWeb.App.UserLive.EditComponent}
      live_action={@live_action}
      current_org={@current_org}
      current_app={@current_app}
      current_user={@current_user}
      return_to={apply_filters(@filters, @meta, ~p"/users")}
    />
  <% :delete -> %>
    <.modal
      max_width="lg"
      title={@page_title}
      subtitle={@page_subtitle}
      variant="delete"
      hide_close_button
    >
      <div class="flex justify-end gap-3">
        <.button
          size="md"
          label="Cancel"
          color="light"
          phx-click={JS.exec("data-cancel", to: "#modal")}
        />
        <.button
          icon="remix-delete-bin-line"
          size="md"
          label={gettext("Yes, Delete \"%{user}\"", user: Util.truncate(User.handle(@user)))}
          color="danger"
          phx-click="delete_user"
          phx-value-id={@user.id}
        />
      </div>
    </.modal>
  <% :import -> %>
    <.live_component
      id={@live_action}
      title={@page_title}
      subtitle={@page_subtitle}
      module={PasswordlessWeb.App.UserLive.ImportComponent}
      live_action={@live_action}
      current_org={@current_org}
      current_user={@current_user}
      return_to={apply_filters(@filters, @meta, ~p"/users")}
    />
  <% _ -> %>
<% end %>
