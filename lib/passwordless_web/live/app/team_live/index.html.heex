<.tabbed_settings_layout current_user={@current_user} current_page={:team}>
  <div class="flex flex-col gap-6">
    <.box card>
      <.form_header title={gettext("Team")} no_margin />
      <.p>
        Emails (OTPs, magic links) are sent from your domain. This allows you to send branded emails and improves deliverability. You can set up a custom domain for your app or use the default system domain.
      </.p>
      <div class="flex">
        <.button
          to={~p"/team/invite"}
          icon="remix-add-circle-line"
          label={gettext("Add member")}
          link_type="live_redirect"
        />
      </div>
    </.box>
    <.data_table
      meta={@meta}
      items={@memberships}
      title={gettext("Members")}
      search_placeholder={gettext("Search by email or name")}
      show_clear_button={false}
    >
      <:if_empty>{gettext("No %{models} found", models: gettext("members"))}</:if_empty>

      <:col :let={membership} field={:name} sortable>
        <div class="flex items-center gap-3">
          <.avatar name={user_name(membership.user)} color="blue" />
          {user_name(membership.user)}
          <.badge
            :if={@current_user.id == membership.user_id}
            size="sm"
            label={gettext("You")}
            color="success"
          />
        </div>
      </:col>
      <:col :let={membership} field={:email} sortable>
        {user_email(membership.user)}
      </:col>
      <:col :let={membership} field={:role}>
        <.role_badge role={membership.role} />
      </:col>
      <:col actions></:col>
      <:actions :let={membership}>
        <.icon_button
          id={"delete-member-#{membership.id}"}
          icon="custom-trash"
          size="sm"
          color="light"
          title={gettext("Remove")}
          link_type="live_patch"
          phx-hook={
            if not Guard.permit(AccountsPolicy, @current_user, :delete, membership),
              do: "TippyHook",
              else: nil
          }
          disabled={not Guard.permit(AccountsPolicy, @current_user, :delete, membership)}
          data-tippy-content={
            if not Guard.permit(AccountsPolicy, @current_user, :delete, membership),
              do: gettext("You cannot remove this teammate"),
              else: nil
          }
          data-tippy-placement="left"
          to={apply_filters(@filters, @meta, ~p"/team/#{membership}/delete")}
        />
        <.icon_button
          size="sm"
          icon="custom-edit"
          color="light"
          title={gettext("Edit")}
          link_type="live_patch"
          to={apply_filters(@filters, @meta, ~p"/team/#{membership}/edit")}
        />
      </:actions>
    </.data_table>

    <.simple_table
      :if={not Enum.empty?(@invitations)}
      items={@invitations}
      count={Enum.count(@invitations)}
      title={gettext("Invitations")}
    >
      <:if_empty>{gettext("No %{models} found", models: gettext("invitations"))}</:if_empty>
      <:col field={:email} />
      <:col :let={invitation} field={:inserted_at} label="Sent">
        {format_date_time(invitation.inserted_at)}
      </:col>
      <:col actions></:col>
      <:actions :let={invitation}>
        <.icon_button
          size="sm"
          icon="custom-trash"
          color="light"
          title={gettext("Remove")}
          to={~p"/team/invitation/#{invitation}/delete"}
          link_type="live_patch"
        />
        <.icon_button
          size="sm"
          icon="custom-edit"
          color="light"
          title={gettext("Resend")}
          to={~p"/team/invitation/#{invitation}/resend"}
          link_type="live_patch"
        />
      </:actions>
    </.simple_table>
  </div>
</.tabbed_settings_layout>

<%= case @live_action do %>
  <% :edit -> %>
    <.live_component
      id={@live_action}
      title={@page_title}
      subtitle={@page_subtitle}
      module={PasswordlessWeb.Org.TeamLive.FormComponent}
      membership={@membership}
      current_org={@current_org}
      current_user={@current_user}
      current_membership={@current_membership}
      return_to={apply_filters(@filters, @meta, ~p"/team")}
    />
  <% :invite -> %>
    <% origin = "right" %>
    <.slide_over title={@page_title} subtitle={@page_subtitle} origin={origin}>
      <.form
        id="form-invite"
        for={@form}
        phx-submit="submit_invitation"
        phx-change="validate_invitation"
      >
        <.field
          type="email"
          field={@form[:email]}
          label={gettext("Email")}
          required
          placeholder={gettext("john.doe@company.com")}
          autocomplete="email"
        />
      </.form>

      <:actions>
        <.button
          size="wide"
          type="submit"
          color="light-flat"
          label={gettext("Cancel")}
          phx-click={PasswordlessWeb.Components.SlideOver.hide_slide_over(origin)}
        />
        <.button
          id="form-invite-submit"
          size="wide"
          type="submit"
          form="form-invite"
          label={gettext("Invite")}
          disabled={not @form.source.valid? or Enum.empty?(@form.source.changes)}
        />
      </:actions>
    </.slide_over>
  <% :resend_invitation -> %>
    <.modal
      max_width="lg"
      title={@page_title}
      subtitle={@page_subtitle}
      variant="delete"
      hide_close_button
    >
      <div class="flex justify-end gap-3">
        <.button
          size="md"
          label="Cancel"
          color="light"
          phx-click={JS.exec("data-cancel", to: "#modal")}
        />
        <.button
          icon="remix-send-plane-line"
          size="md"
          label={gettext("Yes, Resend invitation")}
          phx-click="resend_invitation"
          phx-value-id={@invitation.id}
        />
      </div>
    </.modal>
  <% :delete_invitation -> %>
    <.modal
      max_width="lg"
      title={@page_title}
      subtitle={@page_subtitle}
      variant="delete"
      hide_close_button
    >
      <div class="flex justify-end gap-3">
        <.button
          size="md"
          label="Cancel"
          color="light"
          phx-click={JS.exec("data-cancel", to: "#modal")}
        />
        <.button
          icon="remix-delete-bin-line"
          size="md"
          label={gettext("Yes, Delete \"%{user}\"", user: @invitation.email)}
          color="danger"
          phx-click="delete_invitation"
          phx-value-id={@invitation.id}
        />
      </div>
    </.modal>
  <% :delete -> %>
    <.modal
      max_width="lg"
      title={@page_title}
      subtitle={@page_subtitle}
      variant="delete"
      hide_close_button
    >
      <div class="flex justify-end gap-3">
        <.button
          size="md"
          label="Cancel"
          color="light"
          phx-click={JS.exec("data-cancel", to: "#modal")}
        />
        <.button
          icon="remix-delete-bin-line"
          size="md"
          label={gettext("Yes, Delete \"%{user}\"", user: user_name(@membership.user))}
          color="danger"
          phx-click="delete_member"
          phx-value-id={@membership.id}
        />
      </div>
    </.modal>
  <% _ -> %>
<% end %>
